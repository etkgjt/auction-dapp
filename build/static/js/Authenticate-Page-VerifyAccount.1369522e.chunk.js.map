{"version":3,"sources":["Modules/Authenticate/Components/AuthWrapper.js","Modules/Authenticate/store/formForgotPassword/selector.js","Modules/Authenticate/store/formForgotUsername/selector.js","Modules/Authenticate/validation/verify.js","Modules/Authenticate/Page/VerifyAccount.js","utility/Utils.js","components/FormField/index.js","components/CustomIcon/index.js"],"names":["AuthWrapper","children","title","extra","history","useHistory","className","onClick","goBack","bordered","size","rounded","color","Icon","ChevronLeft","reducer","state","formForgotPassword","formSubmitLoadingSelector","createSelector","data","formForgotPasswordLoading","formSubmitSuccessSelector","formForgotPasswordSuccess","formSubmitErrorSelector","formForgotPasswordError","formSubmitDataResponseSelector","formForgotPasswordDataResponse","formForgotUsername","formForgotUsernameLoading","formForgotUsernameSuccess","formForgotUsernameError","formForgotUsernameDataResponse","getValueForm","valuesDefault","otp","validationSchema","i18n","Yup","shape","nullable","required","messageError","t","VerifyAccount","params","useParams","useTranslation","dispatch","useDispatch","error","useSelector","response","loading","formSubmitSuccess","dataFormForgotPassword","dataForgotPassword","type","dataForgotUsername","formData","userName","phone","isEmail","emailRegex","test","useEffect","toast","retText","position","autoClose","actions","formVerifyAccountFnReset","dismiss","push","keepDataResponse","messageFormat","secretPhone","onSubmit","values","formVerifyAccountFnMethod","initialValues","formik","ev","preventDefault","field","innerClass","placeholder","block","handleSubmit","message","str","i","replace","value","RegExp","emailOrPhoneRegex","phoneNumber","substring","fullNameRegex","phoneRegex","FormField","label","borderless","prepend","append","handleChange","handleBlur","touched","errors","submitOnEnter","disabled","multiline","onBlurCustom","touch","InputField","invalid","Boolean","onBlur","onChange","multiple","onKeyUp","key","keyCode","ErrorField","classnames","style","addonType","defaultProps","innerclass","sizes","sm","md","lg","CustomIcon","props","width","height","marginRight","iconSize","centered","classNames","undefined"],"mappings":"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","file":"static/js/Authenticate-Page-VerifyAccount.1369522e.chunk.js","sourcesContent":["import \"../styles/index.scss\"\r\n\r\nimport React from \"react\"\r\nimport { Card, CardBody, CardTitle } from \"reactstrap\"\r\nimport CustomIcon from \"../../../components/CustomIcon\"\r\nimport { ChevronLeft } from \"react-feather\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst AuthWrapper = ({ children, title, extra }) => {\r\n  const history = useHistory()\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <div className=\"background-auth row\">\r\n        <div className=\"col-md-6\">\r\n          <div className=\"wrap-cloud-auth\">\r\n            <div className=\"cloud-auth\"></div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <div className=\"right-img\"></div>\r\n        </div>\r\n        <div className=\"cloud-bottom\"></div>\r\n        <div className=\"bottom-background\"></div>\r\n      </div>\r\n      <div className=\"auth-wrapper\">\r\n        <div className=\"auth-arrow\" onClick={() => history.goBack()}>\r\n          <CustomIcon\r\n            bordered\r\n            size=\"lg\"\r\n            rounded\r\n            color=\"primary\"\r\n            className=\"bg-white mb-1\"\r\n            Icon={ChevronLeft}\r\n          />\r\n        </div>\r\n        <div className=\"auth-form\">\r\n          <Card>\r\n            <CardBody>\r\n              <CardTitle className=\"card-head-title pt-2\">{title}</CardTitle>\r\n              <div className=\"card-head-extra\">{extra}</div>\r\n              {children}\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AuthWrapper\r\n","import { createSelector } from 'reselect'\r\nexport const reducer = (state) => state.formForgotPassword\r\n\r\nexport const formSubmitLoadingSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotPasswordLoading || false\r\n)\r\n\r\nexport const formSubmitSuccessSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotPasswordSuccess || false\r\n)\r\n\r\nexport const formSubmitErrorSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotPasswordError || false\r\n)\r\n\r\nexport const formSubmitDataResponseSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotPasswordDataResponse || null\r\n)\r\n","import { createSelector } from 'reselect'\r\nexport const reducer = (state) => state.formForgotUsername\r\n\r\nexport const formSubmitLoadingSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotUsernameLoading || false\r\n)\r\n\r\nexport const formSubmitSuccessSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotUsernameSuccess || false\r\n)\r\n\r\nexport const formSubmitErrorSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotUsernameError || false\r\n)\r\n\r\nexport const formSubmitDataResponseSelector = createSelector(\r\n    reducer,\r\n    (data) => data?.formForgotUsernameDataResponse || null\r\n)\r\n","import * as Yup from 'yup'\r\nimport { messageError } from '@utils'\r\n\r\nexport const getValueForm = (valuesDefault = {}) => {\r\n  return {\r\n      otp: null,\r\n      ...valuesDefault\r\n  }\r\n}\r\n\r\nexport const validationSchema = i18n => {\r\n  return Yup.object().shape({\r\n      otp: Yup.string().nullable()\r\n          .required(messageError(i18n.t(\"validation:required\"), i18n.t(\"FormVerifyAccount:field:otp\")))\r\n  })\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport { Form, Button } from \"reactstrap\"\r\nimport { Formik } from \"formik\"\r\nimport FormField from \"../../../components/FormField\"\r\nimport AuthWrapper from \"../Components/AuthWrapper\"\r\n\r\nimport { useHistory, useParams } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport {\r\n  formSubmitErrorSelector,\r\n  formSubmitDataResponseSelector,\r\n  formSubmitLoadingSelector,\r\n  formSubmitSuccessSelector\r\n} from \"../store/formVerifyAccount/selector\"\r\nimport { formSubmitDataResponseSelector as dataForgotPassword } from \"../store/formForgotPassword/selector\"\r\nimport { formSubmitDataResponseSelector as dataForgotUsername } from \"../store/formForgotUsername/selector\"\r\nimport { toast } from \"react-toastify\"\r\nimport { validationSchema, getValueForm } from \"../validation/verify\"\r\nimport { actions } from \"../store/formVerifyAccount/reducer\"\r\nimport { emailRegex, messageFormat, secretPhone } from \"@utils\"\r\n\r\nconst VerifyAccount = () => {\r\n  const params = useParams()\r\n  const { i18n } = useTranslation()\r\n  const history = useHistory()\r\n  const dispatch = useDispatch()\r\n  const error = useSelector((state) => formSubmitErrorSelector(state))\r\n  const response = useSelector((state) => formSubmitDataResponseSelector(state))\r\n  const loading = useSelector((state) => formSubmitLoadingSelector(state))\r\n  const formSubmitSuccess = useSelector((state) =>\r\n    formSubmitSuccessSelector(state)\r\n  )\r\n  const dataFormForgotPassword = useSelector((state) =>\r\n    dataForgotPassword(state)\r\n  )\r\n  const dataFormForgotUserName = useSelector((state) =>\r\n    dataForgotUsername(state)\r\n  )\r\n\r\n  const type = params?.type\r\n\r\n  const formData = useSelector((state) => {\r\n    const forgotPasswordPhone = dataFormForgotPassword?.userName\r\n\r\n    return type === 0\r\n      ? {\r\n          phone: dataFormForgotPassword?.phone,\r\n          type: \"forgotPassword\",\r\n          userName: dataFormForgotPassword?.userName\r\n        }\r\n      : {\r\n          phone: dataForgotUsername(state)?.phone,\r\n          type: \"forgotUsername\"\r\n        }\r\n  })\r\n\r\n  const isEmail = emailRegex.test(formData)\r\n\r\n  const onSubmit = (values) => {\r\n    if (formData) {\r\n      dispatch(\r\n        actions.formVerifyAccountFnMethod({\r\n          otp: values.otp,\r\n          ...formData\r\n        })\r\n      )\r\n    } else {\r\n      history.goBack()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(response.error?.retText, {\r\n        position: \"top-center\",\r\n        autoClose: 3000\r\n      })\r\n      dispatch(actions.formVerifyAccountFnReset())\r\n      return () => {\r\n        dispatch(actions.formVerifyAccountFnReset())\r\n      }\r\n    }\r\n    if (formSubmitSuccess) {\r\n      toast.dismiss()\r\n      history.push(\"/accounts/list\")\r\n      return () => {\r\n        dispatch(\r\n          actions.formVerifyAccountFnReset({\r\n            keepDataResponse: true\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }, [formSubmitSuccess, error])\r\n\r\n  return (\r\n    <AuthWrapper\r\n      title={i18n.t(`FormVerifyAccount:title`)}\r\n      extra={\r\n        isEmail\r\n          ? messageFormat(i18n.t(\"FormVerifyAccount:title_description_email\"), {\r\n              \"{_Email_}\": secretPhone(formData.phone)\r\n            })\r\n          : messageFormat(i18n.t(\"FormVerifyAccount:title_description_phone\"), {\r\n              \"{_Phone_}\": secretPhone(formData.phone)\r\n            })\r\n      }\r\n    >\r\n      <Formik\r\n        onSubmit={onSubmit}\r\n        validationSchema={validationSchema(i18n)}\r\n        initialValues={getValueForm({})}\r\n      >\r\n        {(formik) => {\r\n          return (\r\n            <Form onSubmit={(ev) => ev.preventDefault()}>\r\n              <FormField\r\n                field=\"otp\"\r\n                {...formik}\r\n                className=\"mb-2\"\r\n                innerClass=\"text-center\"\r\n                placeholder={i18n.t(`FormVerifyAccount:field:otp`)}\r\n              ></FormField>\r\n\r\n              <Button\r\n                color=\"primary\"\r\n                size=\"lg\"\r\n                block={true}\r\n                className=\"mb-2\"\r\n                loading={loading}\r\n                onClick={formik.handleSubmit}\r\n              >\r\n                {i18n.t(`FormVerifyAccount:btn_verify`)}\r\n              </Button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </AuthWrapper>\r\n  )\r\n}\r\n\r\nexport default VerifyAccount\r\n","// ** Checks if an object is empty (returns boolean)\r\nexport const isObjEmpty = (obj) => Object.keys(obj).length === 0;\r\n\r\n// ** Returns K format from a number\r\nexport const kFormatter = (num) =>\r\n  num > 999 ? `${(num / 1000).toFixed(1)}k` : num;\r\n\r\n// ** Converts HTML to string\r\nexport const htmlToString = (html) => html.replace(/<\\/?[^>]+(>|$)/g, '');\r\n\r\n// ** Checks if the passed date is today\r\nconst isToday = (date) => {\r\n  const today = new Date();\r\n  return (\r\n    /* eslint-disable operator-linebreak */\r\n    date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n    /* eslint-enable */\r\n  );\r\n};\r\n\r\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\r\nexport const formatDate = (\r\n  value,\r\n  formatting = { month: 'short', day: 'numeric', year: 'numeric' }\r\n) => {\r\n  if (!value) return value;\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\r\n};\r\n\r\n// ** Returns short month of passed date\r\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\r\n  const date = new Date(value);\r\n  let formatting = { month: 'short', day: 'numeric' };\r\n\r\n  if (toTimeForCurrentDay && isToday(date)) {\r\n    formatting = { hour: 'numeric', minute: 'numeric' };\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\r\n};\r\n\r\n/**\r\n ** Return if user is logged in\r\n ** This is completely up to you and how you want to store the token in your frontend application\r\n *  ? e.g. If you are using cookies to store the application please update this function\r\n */\r\nexport const isUserLoggedIn = () => localStorage.getItem('userData');\r\nexport const getUserData = () => JSON.parse(localStorage.getItem('userData'));\r\n\r\n/**\r\n ** This function is used for demo purpose route navigation\r\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n ** Please note role field is just for showing purpose it's not used by anything in frontend\r\n ** We are checking role just for ease\r\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\r\nexport const getHomeRouteForLoggedInUser = (userRole) => {\r\n  if (userRole === 'admin') return '/';\r\n  if (userRole === 'client') return '/access-control';\r\n  return '/login';\r\n};\r\n\r\n// ** React Select Theme Colors\r\nexport const selectThemeColors = (theme) => ({\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    primary25: '#7367f01a', // for option hover bg-color\r\n    primary: '#7367f0', // for selected option bg-color\r\n    neutral10: '#7367f0', // for tags bg-color\r\n    neutral20: '#ededed', // for input border-color\r\n    neutral30: '#ededed', // for input hover border-color\r\n  },\r\n});\r\n\r\nexport const messageError = (message, field, params = {}) => {\r\n  let str = message;\r\n  str = str.replace(/{_field_}/gi, field);\r\n  for (const i in params) {\r\n    const value = params[i];\r\n    str = str.replace(new RegExp(i, 'gi'), value);\r\n  }\r\n  return str;\r\n};\r\n\r\nexport const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n// export const phoneRegex = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/\r\nexport const emailOrPhoneRegex =\r\n  /((84|0[3|5|7|8|9])+([0-9]{8})\\b)|(^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$)/;\r\n\r\nexport const secretPhone = (phoneNumber = '') => {\r\n  phoneNumber = phoneNumber.replace(phoneNumber.substring(4, 6), '***');\r\n  return phoneNumber;\r\n};\r\n\r\nexport const messageFormat = (message, params = {}) => {\r\n  let str = message;\r\n  for (const i in params) {\r\n    const value = params[i];\r\n    str = str.replace(new RegExp(i, 'gi'), value);\r\n  }\r\n  return str;\r\n};\r\nexport const fullNameRegex =\r\n  /^[a-zA-ZÀÁÂÃÈÉÊẾÌÍÒÓÔÕÙÚĂĐĨŨƠàáâãèéêếìíòóôõùúăđĩũơƯĂẠẢẤẦẨẪẬẮẰẲẴẶ\" +\"ẸẺẼỀỀỂưăạảấầẩẫậắằẳẵặẹẻẽềềểỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪễệỉịọỏốồổỗộớờởỡợ\"+\"ụủứừỬỮỰỲỴÝỶỸửữựỳýỵỷỹ\\s]{1,50}$/;\r\nexport const phoneRegex = /([\\+84|84|0]+(3|5|7|8|9|1[2|6|8|9]))+([0-9]{8})\\b/;\r\nexport const usernameRegex = /^[a-zA-Z0-9_\\.]+$/;\r\n\r\n// ** Converts table to CSV\r\nexport const convertArrayOfObjectsToCSV = (array) => {\r\n  let result;\r\n\r\n  const columnDelimiter = ',';\r\n  const lineDelimiter = '\\n';\r\n  const keys = Object.keys(data[0]);\r\n\r\n  result = '';\r\n  result += keys.join(columnDelimiter);\r\n  result += lineDelimiter;\r\n\r\n  array.forEach((item) => {\r\n    let ctr = 0;\r\n    keys.forEach((key) => {\r\n      if (ctr > 0) result += columnDelimiter;\r\n\r\n      result += item[key];\r\n\r\n      ctr++;\r\n    });\r\n    result += lineDelimiter;\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nexport const isFireStoreVideo = (value) => {\r\n  return /https?:\\/\\/.*\\.(?:mov|mp4)\\?.*/.test(value);\r\n};\r\n\r\nexport const isFireStoreImages = (value) => {\r\n  return /https?:\\/\\/.*\\.(?:jpg|jpeg|png|gif)\\?.*/.test(value);\r\n};\r\n\r\nexport const removeAccents = (str) => {\r\n  const AccentsMap = [\r\n    'aàảãáạăằẳẵắặâầẩẫấậ',\r\n    'AÀẢÃÁẠĂẰẲẴẮẶÂẦẨẪẤẬ',\r\n    'dđ',\r\n    'DĐ',\r\n    'eèẻẽéẹêềểễếệ',\r\n    'EÈẺẼÉẸÊỀỂỄẾỆ',\r\n    'iìỉĩíị',\r\n    'IÌỈĨÍỊ',\r\n    'oòỏõóọôồổỗốộơờởỡớợ',\r\n    'OÒỎÕÓỌÔỒỔỖỐỘƠỜỞỠỚỢ',\r\n    'uùủũúụưừửữứự',\r\n    'UÙỦŨÚỤƯỪỬỮỨỰ',\r\n    'yỳỷỹýỵ',\r\n    'YỲỶỸÝỴ',\r\n  ];\r\n  for (let i = 0; i < AccentsMap.length; i++) {\r\n    const re = new RegExp('[' + AccentsMap[i].substr(1) + ']', 'g');\r\n    const char = AccentsMap[i][0];\r\n    str = str.replace(re, char);\r\n  }\r\n  return str;\r\n};\r\n","import React from \"react\"\r\n\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport \"./style.scss\"\r\n\r\nimport {\r\n  FormFeedback,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Label,\r\n  InputGroupText,\r\n  FormGroup\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\n\r\nconst FormField = ({\r\n  field,\r\n  label,\r\n  borderless,\r\n  placeholder,\r\n  required,\r\n  prepend,\r\n  children,\r\n  append,\r\n  type,\r\n  handleChange,\r\n  handleBlur,\r\n  className,\r\n  touched = {},\r\n  errors = {},\r\n  values = {},\r\n  innerClass,\r\n  handleSubmit,\r\n  submitOnEnter,\r\n  disabled = false,\r\n  multiline = false,\r\n  onBlurCustom\r\n}) => {\r\n  const touch = touched[field]\r\n  const error = errors[field]\r\n  const value = values[field] || \"\"\r\n\r\n  const InputField = (\r\n    <Input\r\n      disabled={disabled}\r\n      className={\"form-field-rounded \" + innerClass}\r\n      invalid={Boolean(error && touch)}\r\n      onBlur={onBlurCustom || handleBlur(field)}\r\n      onChange={handleChange(field)}\r\n      value={value}\r\n      placeholder={placeholder}\r\n      required={required}\r\n      type={type}\r\n      multiple={multiline}\r\n      onKeyUp={(ev) =>\r\n        (ev.key === \"Enter\" || ev.keyCode === 13) &&\r\n        submitOnEnter &&\r\n        typeof handleSubmit === \"function\" &&\r\n        handleSubmit()\r\n      }\r\n    />\r\n  )\r\n  const ErrorField = touch && <p className=\"field-error\">{error}</p>\r\n\r\n  return (\r\n    <>\r\n      <FormGroup\r\n        className={classnames({\r\n          [className]: true,\r\n          borderless\r\n        })}\r\n        style={{ position: \"relative\" }}\r\n      >\r\n        {label && <Label className=\"form-label\">{label}</Label>}\r\n        {append || prepend ? (\r\n          <InputGroup>\r\n            {prepend && (\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                <InputGroupText>{prepend}</InputGroupText>\r\n              </InputGroupAddon>\r\n            )}\r\n            {InputField}\r\n            {append && (\r\n              <InputGroupAddon addonType=\"append\">\r\n                <InputGroupText>{append}</InputGroupText>\r\n              </InputGroupAddon>\r\n            )}\r\n            {ErrorField}\r\n          </InputGroup>\r\n        ) : (\r\n          <>\r\n            {InputField}\r\n            {ErrorField}\r\n          </>\r\n        )}\r\n        {children}\r\n      </FormGroup>\r\n    </>\r\n  )\r\n}\r\n\r\nFormField.propTypes = {\r\n  field: PropTypes.string,\r\n  label: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  borderless: PropTypes.bool,\r\n  prepend: PropTypes.any,\r\n  append: PropTypes.any,\r\n  type: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n  handleBlur: PropTypes.func,\r\n  className: PropTypes.string,\r\n  innerClass: PropTypes.string,\r\n  touched: PropTypes.object,\r\n  errors: PropTypes.object,\r\n  values: PropTypes.object,\r\n  submitOnEnter: PropTypes.bool,\r\n  onSubmit: PropTypes.any\r\n}\r\n\r\nFormField.defaultProps = {\r\n  className: \"\",\r\n  innerclass: \"\",\r\n  submitOnEnter: true\r\n}\r\n\r\nexport default FormField\r\n","import PropTypes from \"prop-types\"\r\nimport React from \"react\"\r\nimport classNames from \"classnames\"\r\nimport \"./index.scss\"\r\n\r\nconst sizes = {\r\n  sm: 17,\r\n  md: 20,\r\n  lg: 36\r\n}\r\n\r\nconst CustomIcon = (props) => {\r\n  const {\r\n    size,\r\n    bordered,\r\n    rounded,\r\n    Icon,\r\n    onClick,\r\n    className = \"\",\r\n    color,\r\n    width,\r\n    height,\r\n    marginRight,\r\n    iconSize,\r\n    style,\r\n    centered\r\n  } = props\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        ...style,\r\n        width: size ? sizes[size] : width,\r\n        height: size ? sizes[size] : height\r\n      }}\r\n      className={classNames({\r\n        [className]: true,\r\n        \"flex-center justify-content-center\": centered,\r\n        \"custom-icon\": true,\r\n        \"custom-icon-btn\": bordered && rounded,\r\n        [`text-${color}`]: color,\r\n        \"rounded-circle\": rounded,\r\n        \"mr-1\": marginRight,\r\n        \"rounded-circle\": rounded,\r\n        bordered\r\n      })}\r\n      onClick={() => typeof onClick === \"function\" && onClick()}\r\n    >\r\n      <Icon size={iconSize || undefined} />\r\n    </span>\r\n  )\r\n}\r\n\r\nCustomIcon.propTypes = {\r\n  Icon: PropTypes.any,\r\n  color: PropTypes.string,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  bordered: PropTypes.bool,\r\n  rounded: PropTypes.bool,\r\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  marginRight: PropTypes.bool,\r\n  centered: PropTypes.bool,\r\n  style: PropTypes.object\r\n}\r\n\r\nexport default CustomIcon\r\n"],"sourceRoot":""}